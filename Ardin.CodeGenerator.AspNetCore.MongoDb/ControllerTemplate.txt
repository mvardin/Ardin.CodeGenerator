using @ArdinNamespace.Data;
using @ArdinNamespace.Model;
using @ArdinNamespace.Service;
using Gridify;
using Gridify.Syntax;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using MongoDB.Driver;
using System;
using System.Collections.Generic;
using System.Linq;
using JohnKnoop.MongoRepository;
using System.Threading.Tasks;

namespace @ArdinNamespace.Controllers
{
    [Route("api/[controller]/[action]")]
    [ApiController]
    public class @ArdinModelNameController : ControllerBase
    {
        private readonly MongoContext context;
        public @ArdinModelNameController(MongoContext context)
        {
            this.context = context;
        }
        [HttpPost]
        public IActionResult List(GridifyQuery query)
        {
            var Items = context.GetRepository<@ArdinModel>().Query().Gridify(query);
            return Ok(new { Status = true, Items });
        }
        [HttpPost]
        public async Task<IActionResult> AddAsync([FromBody] @ArdinModel @ArdinModelName)
        {
            await context.GetRepository<@ArdinModel>().InsertAsync(@ArdinModelName);
            return Ok(new { Status = true, @ArdinModelName });
        }
        [HttpPost]
        public async Task<IActionResult> UpdateAsync([FromBody] @ArdinModel @ArdinModelName)
        {
            await context.GetRepository<@ArdinModel>().ReplaceOneAsync(a => a.Id == @ArdinModelName.Id, @ArdinModelName);
            return Ok(new { Status = true, @ArdinModelName });
        }
        [HttpPost]
        public async Task<IActionResult> DeleteAsync([FromBody] IdModel model)
        {
            await context.GetRepository<@ArdinModel>().DeleteByIdAsync(model.Id);
            return Ok(new { Status = true });
        }
    }
}